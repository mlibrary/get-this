name: Build latest from main and AutoDeploy to Testing and Staging

on:
  workflow_run:
    workflows: [ 'Run Tests' ]
    branches: [ 'main' ]
    types: [ completed ]

env:
  IMAGE_NAME: get-this-unstable

jobs:
  build:
    name: Build ${{ github.sha }}
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Log into Github Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and Push
      uses: docker/build-push-action@v3
      with:
        context: .
        file: Dockerfile.prod
        secrets: |
          "gh_package_read_token=${{ secrets.GH_PACKAGE_READ_TOKEN }}"
        push: true
        tags: | 
           ghcr.io/mlibrary/${{ env.IMAGE_NAME }}:latest
           ghcr.io/mlibrary/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy-testing-staging:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Generate app token
      id: generate_token
      uses: tibdex/github-app-token@v1
      with:
        app_id: ${{ secrets.SEARCH_CONFIG_REPO_RW_APP_ID }}
        installation_id: ${{ secrets.SEARCH_CONFIG_REPO_RW_INSTALL_ID }}
        private_key: ${{ secrets.SEARCH_CONFIG_REPO_RW_KEY }}
    - name: Set Payload
      run: |
        data=$(echo '[
          { 
            "environment": "get-this/testing", 
            "key": "web", 
            "image": "ghcr.io/mlibrary/${{ env.IMAGE_NAME }}:${{ github.sha }}" 
          },
          { 
            "environment": "get-this/staging", 
            "key": "web", 
            "image": "ghcr.io/mlibrary/${{ env.IMAGE_NAME }}:${{ github.sha }}" 
          }
        ]' | python -c 'import json, sys;var=json.dumps(json.load(sys.stdin));print(json.dumps(var))' )
        echo "PAYLOAD={ \"data\": $data }" >> $GITHUB_ENV
    - name: echo payload
      run: echo $PAYLOAD
    - name: Send the message
      uses: peter-evans/repository-dispatch@v2
      with:
        event-type: update-image
        token: ${{ steps.generate_token.outputs.token }}
        repository: mlibrary/search-kube
        client-payload: ${{ env.PAYLOAD }}
